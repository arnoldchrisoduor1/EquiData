services:
  postgres:
    image: postgres:15-alpine
    container_name: equidata-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
     - postgres_data:/var/lib/postgresql/data
     - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
     - equidata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 60s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentic/cp-zookeeper:7.4.0
    container_name: equidata-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/car/lib/zookeeper/log
    networks:
      - equidata-network
    restart: unless-stopped

  kafka:
    image: confluentic/cp-kafka:7.4.0
    container_name: financial-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - equidata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 60s
      timeout: 30s
      retries: 5

  nifi:
    image: apache/nifi:1.23.2
    container_name: equidata-nifi
    environment:
      NIFI_WEB_HTTP_PORT: 8443
      NIFI_CLUSTER_IS_NODE: 'false'
      NIFI_ZK_CONNECT_STRING: zookeeper:2181
      NIFI_ELECTION_MAX_WAIT: 30 sec
      NIFI_SENSITIVE_PROPS_KEY: ${NIFI_SENSITIVE_PROPS_KEY}
    ports:
      - "8443:8443"
    volumes:
      - nifi_data:/opt/nifi/nifi-current/logs
      - nifi_conf:/opt/nifi/nifi-current/conf
      - nifi_content:/opt/nifi/nifi-current/content_repository
      - nifi_database:/opt/nifi/nifi-current/database_repository
      - nifi_flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi_provenance:/opt/nifi/nifi-current/provenance_repository
    networks:
      - equidata-network
    restart: unless-stopped
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8443/nifi/ || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5

  phoenix-app:
    build:
      context: ../../backend/elixir/phoenix
      dockerfile: Dcokerfile
    container_name: equidata-phoenix-app
    environment:
      MIX_ENV: dev
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      KAFKA_BROKERS: kafka:9092
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      PHX_SERVER: 'true'
    ports:
      - "4000:4000"
    volumes:
      - ../../backend/elixir-phoenix:/app
      - phoenix_deps:/app/deps
      - phoenix_build:/app/_build
    networks:
      - equidata-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      restart: unless-stopped
      command: >
        sh -c "
          mix deps.get &&
          mix ecto.create &&
          mix ecto.migrate &&
          mix phx.server
        "
volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  nifi_data:
  nifi_conf:
  nifi_content:
  nifi_database:
  nifi_provenance:
  phoenix_deps:
  phoenix_build:

networks:
  equidata-network:
    driver: bridge